// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: project_skill.sql

package database

import (
	"context"
)

const addProjectSkill = `-- name: AddProjectSkill :exec
INSERT INTO ProjectSkill (project_id, skill_id) VALUES (?, ?)
`

type AddProjectSkillParams struct {
	ProjectID int64 `json:"project_id"`
	SkillID   int64 `json:"skill_id"`
}

func (q *Queries) AddProjectSkill(ctx context.Context, db DBTX, arg AddProjectSkillParams) error {
	_, err := db.ExecContext(ctx, addProjectSkill, arg.ProjectID, arg.SkillID)
	return err
}

const getSkillsForProject = `-- name: GetSkillsForProject :many
SELECT s.id, s.user_id, s.name, s.description, s.created_at, s.updated_at FROM UserSkills s JOIN ProjectSkill ps ON s.id = ps.skill_id WHERE ps.project_id = ?
`

func (q *Queries) GetSkillsForProject(ctx context.Context, db DBTX, projectID int64) ([]UserSkill, error) {
	rows, err := db.QueryContext(ctx, getSkillsForProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserSkill
	for rows.Next() {
		var i UserSkill
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeProjectSkill = `-- name: RemoveProjectSkill :exec
DELETE FROM ProjectSkill WHERE project_id = ? AND skill_id = ?
`

type RemoveProjectSkillParams struct {
	ProjectID int64 `json:"project_id"`
	SkillID   int64 `json:"skill_id"`
}

func (q *Queries) RemoveProjectSkill(ctx context.Context, db DBTX, arg RemoveProjectSkillParams) error {
	_, err := db.ExecContext(ctx, removeProjectSkill, arg.ProjectID, arg.SkillID)
	return err
}
