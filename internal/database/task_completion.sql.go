// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: task_completion.sql

package database

import (
	"context"
)

const createTaskCompletion = `-- name: CreateTaskCompletion :one
INSERT INTO TaskCompletions (
    cardId,
    userId,
    baseExp,
    timeBonusExp,
    streakBonusExp,
    totalExp
) VALUES (
    ?, ?, ?, ?, ?, ?
) RETURNING id, cardid, userid, completiontime, baseexp, timebonusexp, streakbonusexp, totalexp
`

type CreateTaskCompletionParams struct {
	Cardid         int64 `json:"cardid"`
	Userid         int64 `json:"userid"`
	Baseexp        int64 `json:"baseexp"`
	Timebonusexp   int64 `json:"timebonusexp"`
	Streakbonusexp int64 `json:"streakbonusexp"`
	Totalexp       int64 `json:"totalexp"`
}

func (q *Queries) CreateTaskCompletion(ctx context.Context, arg CreateTaskCompletionParams) (TaskCompletion, error) {
	row := q.db.QueryRowContext(ctx, createTaskCompletion,
		arg.Cardid,
		arg.Userid,
		arg.Baseexp,
		arg.Timebonusexp,
		arg.Streakbonusexp,
		arg.Totalexp,
	)
	var i TaskCompletion
	err := row.Scan(
		&i.ID,
		&i.Cardid,
		&i.Userid,
		&i.Completiontime,
		&i.Baseexp,
		&i.Timebonusexp,
		&i.Streakbonusexp,
		&i.Totalexp,
	)
	return i, err
}

const getTaskCompletion = `-- name: GetTaskCompletion :one
SELECT id, cardid, userid, completiontime, baseexp, timebonusexp, streakbonusexp, totalexp FROM TaskCompletions
WHERE cardId = ? AND userId = ?
`

type GetTaskCompletionParams struct {
	Cardid int64 `json:"cardid"`
	Userid int64 `json:"userid"`
}

func (q *Queries) GetTaskCompletion(ctx context.Context, arg GetTaskCompletionParams) (TaskCompletion, error) {
	row := q.db.QueryRowContext(ctx, getTaskCompletion, arg.Cardid, arg.Userid)
	var i TaskCompletion
	err := row.Scan(
		&i.ID,
		&i.Cardid,
		&i.Userid,
		&i.Completiontime,
		&i.Baseexp,
		&i.Timebonusexp,
		&i.Streakbonusexp,
		&i.Totalexp,
	)
	return i, err
}

const listTaskCompletionsByUser = `-- name: ListTaskCompletionsByUser :many
SELECT id, cardid, userid, completiontime, baseexp, timebonusexp, streakbonusexp, totalexp FROM TaskCompletions
WHERE userId = ?
ORDER BY completionTime DESC
`

func (q *Queries) ListTaskCompletionsByUser(ctx context.Context, userid int64) ([]TaskCompletion, error) {
	rows, err := q.db.QueryContext(ctx, listTaskCompletionsByUser, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaskCompletion
	for rows.Next() {
		var i TaskCompletion
		if err := rows.Scan(
			&i.ID,
			&i.Cardid,
			&i.Userid,
			&i.Completiontime,
			&i.Baseexp,
			&i.Timebonusexp,
			&i.Streakbonusexp,
			&i.Totalexp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const totalUserExp = `-- name: TotalUserExp :one
SELECT CAST(IFNULL(SUM(totalExp), 0) AS FLOAT) as total_exp FROM TaskCompletions WHERE userId = ?
`

func (q *Queries) TotalUserExp(ctx context.Context, userid int64) (float64, error) {
	row := q.db.QueryRowContext(ctx, totalUserExp, userid)
	var total_exp float64
	err := row.Scan(&total_exp)
	return total_exp, err
}
