// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: skill.sql

package database

import (
	"context"
	"database/sql"
)

const createSkill = `-- name: CreateSkill :one
INSERT INTO UserSkills (user_id, name, description) VALUES (?, ?, ?) RETURNING id, user_id, name, description, created_at, updated_at
`

type CreateSkillParams struct {
	UserID      int64          `json:"user_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateSkill(ctx context.Context, db DBTX, arg CreateSkillParams) (UserSkill, error) {
	row := db.QueryRowContext(ctx, createSkill, arg.UserID, arg.Name, arg.Description)
	var i UserSkill
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSkill = `-- name: DeleteSkill :exec
DELETE FROM UserSkills WHERE id = ?
`

func (q *Queries) DeleteSkill(ctx context.Context, db DBTX, id int64) error {
	_, err := db.ExecContext(ctx, deleteSkill, id)
	return err
}

const getSkillByID = `-- name: GetSkillByID :one
SELECT id, user_id, name, description, created_at, updated_at FROM UserSkills WHERE id = ? LIMIT 1
`

func (q *Queries) GetSkillByID(ctx context.Context, db DBTX, id int64) (UserSkill, error) {
	row := db.QueryRowContext(ctx, getSkillByID, id)
	var i UserSkill
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSkillsByUserID = `-- name: GetSkillsByUserID :many
SELECT id, user_id, name, description, created_at, updated_at FROM UserSkills WHERE user_id = ?
`

func (q *Queries) GetSkillsByUserID(ctx context.Context, db DBTX, userID int64) ([]UserSkill, error) {
	rows, err := db.QueryContext(ctx, getSkillsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserSkill
	for rows.Next() {
		var i UserSkill
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSkill = `-- name: UpdateSkill :one
UPDATE UserSkills SET name = ?, description = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ? RETURNING id, user_id, name, description, created_at, updated_at
`

type UpdateSkillParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	ID          int64          `json:"id"`
}

func (q *Queries) UpdateSkill(ctx context.Context, db DBTX, arg UpdateSkillParams) (UserSkill, error) {
	row := db.QueryRowContext(ctx, updateSkill, arg.Name, arg.Description, arg.ID)
	var i UserSkill
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
