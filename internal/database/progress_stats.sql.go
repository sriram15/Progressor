// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: progress_stats.sql

package database

import (
	"context"
	"database/sql"
)

const aggregateMonthHours = `-- name: AggregateMonthHours :one
SELECT CAST(IFNULL(SUM(te.duration), 0) AS FLOAT) AS totalTrackedMinsCurrentMonth
FROM TimeEntries te
JOIN Cards c ON te.cardId = c.id
JOIN Projects p ON c.projectId = p.id
WHERE p.id = ?
AND strftime('%Y-%m', te.startTime) = strftime('%Y-%m', 'now')
`

func (q *Queries) AggregateMonthHours(ctx context.Context, id int64) (float64, error) {
	row := q.db.QueryRowContext(ctx, aggregateMonthHours, id)
	var totaltrackedminscurrentmonth float64
	err := row.Scan(&totaltrackedminscurrentmonth)
	return totaltrackedminscurrentmonth, err
}

const aggregateWeekHours = `-- name: AggregateWeekHours :one
SELECT CAST(IFNULL(SUM(te.duration), 0) AS FLOAT) AS totalTrackedMinsCurrentWeek
FROM TimeEntries te
JOIN Cards c ON te.cardId = c.id
JOIN Projects p ON c.projectId = p.id
WHERE p.id = ?
AND strftime('%Y-%W', te.startTime) = strftime('%Y-%W', 'now')
`

func (q *Queries) AggregateWeekHours(ctx context.Context, id int64) (float64, error) {
	row := q.db.QueryRowContext(ctx, aggregateWeekHours, id)
	var totaltrackedminscurrentweek float64
	err := row.Scan(&totaltrackedminscurrentweek)
	return totaltrackedminscurrentweek, err
}

const aggregateYearHours = `-- name: AggregateYearHours :one
SELECT CAST(IFNULL(SUM(te.duration), 0) AS FLOAT) AS totalTrackedMinsCurrentYear
FROM TimeEntries te
JOIN Cards c ON te.cardId = c.id
JOIN Projects p ON c.projectId = p.id
WHERE p.id = ?
AND strftime('%Y', te.startTime) = strftime('%Y', 'now')
`

func (q *Queries) AggregateYearHours(ctx context.Context, id int64) (float64, error) {
	row := q.db.QueryRowContext(ctx, aggregateYearHours, id)
	var totaltrackedminscurrentyear float64
	err := row.Scan(&totaltrackedminscurrentyear)
	return totaltrackedminscurrentyear, err
}

const getDailyTotalMinutes = `-- name: GetDailyTotalMinutes :many
SELECT 
    DATE(startTime) AS date,
    SUM(duration) AS total_minutes
FROM 
    TimeEntries
WHERE 
    startTime >= DATE('now', '-1 year')
GROUP BY 
    DATE(startTime)
ORDER BY 
    DATE(startTime)
`

type GetDailyTotalMinutesRow struct {
	Date         interface{}     `json:"date"`
	TotalMinutes sql.NullFloat64 `json:"total_minutes"`
}

func (q *Queries) GetDailyTotalMinutes(ctx context.Context) ([]GetDailyTotalMinutesRow, error) {
	rows, err := q.db.QueryContext(ctx, getDailyTotalMinutes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDailyTotalMinutesRow
	for rows.Next() {
		var i GetDailyTotalMinutesRow
		if err := rows.Scan(&i.Date, &i.TotalMinutes); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
