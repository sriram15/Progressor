// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: card_table.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createCard = `-- name: CreateCard :exec
INSERT INTO Cards (title, description, status, projectId, estimatedMins) VALUES (?, ?, ?, ?, ?)
`

type CreateCardParams struct {
	Title         string         `json:"title"`
	Description   sql.NullString `json:"description"`
	Status        int64          `json:"status"`
	Projectid     int64          `json:"projectid"`
	Estimatedmins int64          `json:"estimatedmins"`
}

func (q *Queries) CreateCard(ctx context.Context, db DBTX, arg CreateCardParams) error {
	_, err := db.ExecContext(ctx, createCard,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.Projectid,
		arg.Estimatedmins,
	)
	return err
}

const createTimeEntry = `-- name: CreateTimeEntry :one
INSERT INTO TimeEntries (cardId, startTime, endTime) 
VALUES (?, ?, ?) 
RETURNING id, cardid, starttime, endtime, duration
`

type CreateTimeEntryParams struct {
	Cardid    int64     `json:"cardid"`
	Starttime time.Time `json:"starttime"`
	Endtime   time.Time `json:"endtime"`
}

func (q *Queries) CreateTimeEntry(ctx context.Context, db DBTX, arg CreateTimeEntryParams) (TimeEntry, error) {
	row := db.QueryRowContext(ctx, createTimeEntry, arg.Cardid, arg.Starttime, arg.Endtime)
	var i TimeEntry
	err := row.Scan(
		&i.ID,
		&i.Cardid,
		&i.Starttime,
		&i.Endtime,
		&i.Duration,
	)
	return i, err
}

const deleteCard = `-- name: DeleteCard :exec
DELETE FROM Cards WHERE projectId = ? AND id = ?
`

type DeleteCardParams struct {
	Projectid int64 `json:"projectid"`
	ID        int64 `json:"id"`
}

func (q *Queries) DeleteCard(ctx context.Context, db DBTX, arg DeleteCardParams) error {
	_, err := db.ExecContext(ctx, deleteCard, arg.Projectid, arg.ID)
	return err
}

const getActiveCard = `-- name: GetActiveCard :one
SELECT id, title, status, projectId FROM Cards WHERE isactive == true
`

type GetActiveCardRow struct {
	ID        int64  `json:"id"`
	Title     string `json:"title"`
	Status    int64  `json:"status"`
	Projectid int64  `json:"projectid"`
}

func (q *Queries) GetActiveCard(ctx context.Context, db DBTX) (GetActiveCardRow, error) {
	row := db.QueryRowContext(ctx, getActiveCard)
	var i GetActiveCardRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Status,
		&i.Projectid,
	)
	return i, err
}

const getActiveTimeEntry = `-- name: GetActiveTimeEntry :one
 SELECT id, cardid, starttime, endtime, duration FROM TimeEntries WHERE cardId = ? AND startTime == endTime
`

func (q *Queries) GetActiveTimeEntry(ctx context.Context, db DBTX, cardid int64) (TimeEntry, error) {
	row := db.QueryRowContext(ctx, getActiveTimeEntry, cardid)
	var i TimeEntry
	err := row.Scan(
		&i.ID,
		&i.Cardid,
		&i.Starttime,
		&i.Endtime,
		&i.Duration,
	)
	return i, err
}

const getCard = `-- name: GetCard :one
SELECT 
    c.id AS card_id,
    c.title,
    c.description,
    c.createdAt,
    c.updatedAt,
    c.status,
    c.completedAt,
    c.isactive,
    c.estimatedMins,
    c.trackedMins,
    c.projectId,
    te.id AS time_entry_id,
    te.startTime,
    te.endTime
FROM 
    Cards c
LEFT JOIN 
    TimeEntries te ON c.id = te.cardId
WHERE 
    c.id = ? AND c.projectId = ?
`

type GetCardParams struct {
	ID        int64 `json:"id"`
	Projectid int64 `json:"projectid"`
}

type GetCardRow struct {
	CardID        int64          `json:"card_id"`
	Title         string         `json:"title"`
	Description   sql.NullString `json:"description"`
	Createdat     sql.NullTime   `json:"createdat"`
	Updatedat     sql.NullTime   `json:"updatedat"`
	Status        int64          `json:"status"`
	Completedat   sql.NullTime   `json:"completedat"`
	Isactive      bool           `json:"isactive"`
	Estimatedmins int64          `json:"estimatedmins"`
	Trackedmins   int64          `json:"trackedmins"`
	Projectid     int64          `json:"projectid"`
	TimeEntryID   sql.NullInt64  `json:"time_entry_id"`
	Starttime     sql.NullTime   `json:"starttime"`
	Endtime       sql.NullTime   `json:"endtime"`
}

func (q *Queries) GetCard(ctx context.Context, db DBTX, arg GetCardParams) (GetCardRow, error) {
	row := db.QueryRowContext(ctx, getCard, arg.ID, arg.Projectid)
	var i GetCardRow
	err := row.Scan(
		&i.CardID,
		&i.Title,
		&i.Description,
		&i.Createdat,
		&i.Updatedat,
		&i.Status,
		&i.Completedat,
		&i.Isactive,
		&i.Estimatedmins,
		&i.Trackedmins,
		&i.Projectid,
		&i.TimeEntryID,
		&i.Starttime,
		&i.Endtime,
	)
	return i, err
}

const listCards = `-- name: ListCards :many
SELECT id, title, description, createdat, updatedat, status, completedat, estimatedmins, trackedmins, isactive, projectid, id AS card_id FROM Cards WHERE projectId = ? AND status = ?
`

type ListCardsParams struct {
	Projectid int64 `json:"projectid"`
	Status    int64 `json:"status"`
}

type ListCardsRow struct {
	ID            int64          `json:"id"`
	Title         string         `json:"title"`
	Description   sql.NullString `json:"description"`
	Createdat     sql.NullTime   `json:"createdat"`
	Updatedat     sql.NullTime   `json:"updatedat"`
	Status        int64          `json:"status"`
	Completedat   sql.NullTime   `json:"completedat"`
	Estimatedmins int64          `json:"estimatedmins"`
	Trackedmins   int64          `json:"trackedmins"`
	Isactive      bool           `json:"isactive"`
	Projectid     int64          `json:"projectid"`
	CardID        int64          `json:"card_id"`
}

func (q *Queries) ListCards(ctx context.Context, db DBTX, arg ListCardsParams) ([]ListCardsRow, error) {
	rows, err := db.QueryContext(ctx, listCards, arg.Projectid, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCardsRow
	for rows.Next() {
		var i ListCardsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Createdat,
			&i.Updatedat,
			&i.Status,
			&i.Completedat,
			&i.Estimatedmins,
			&i.Trackedmins,
			&i.Isactive,
			&i.Projectid,
			&i.CardID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateActiveTimeEntry = `-- name: UpdateActiveTimeEntry :exec
UPDATE TimeEntries SET endTime = ?, duration = ? WHERE id = ?
`

type UpdateActiveTimeEntryParams struct {
	Endtime  time.Time `json:"endtime"`
	Duration int64     `json:"duration"`
	ID       int64     `json:"id"`
}

func (q *Queries) UpdateActiveTimeEntry(ctx context.Context, db DBTX, arg UpdateActiveTimeEntryParams) error {
	_, err := db.ExecContext(ctx, updateActiveTimeEntry, arg.Endtime, arg.Duration, arg.ID)
	return err
}

const updateCard = `-- name: UpdateCard :exec
UPDATE Cards SET title = ?, description = ?, status = ?, completedAt = ?, estimatedMins = ?, trackedMins = ? WHERE id = ?
`

type UpdateCardParams struct {
	Title         string         `json:"title"`
	Description   sql.NullString `json:"description"`
	Status        int64          `json:"status"`
	Completedat   sql.NullTime   `json:"completedat"`
	Estimatedmins int64          `json:"estimatedmins"`
	Trackedmins   int64          `json:"trackedmins"`
	ID            int64          `json:"id"`
}

func (q *Queries) UpdateCard(ctx context.Context, db DBTX, arg UpdateCardParams) error {
	_, err := db.ExecContext(ctx, updateCard,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.Completedat,
		arg.Estimatedmins,
		arg.Trackedmins,
		arg.ID,
	)
	return err
}

const updateCardActive = `-- name: UpdateCardActive :exec
UPDATE Cards SET isactive = ?, trackedMins = ? WHERE id = ?
`

type UpdateCardActiveParams struct {
	Isactive    bool  `json:"isactive"`
	Trackedmins int64 `json:"trackedmins"`
	ID          int64 `json:"id"`
}

func (q *Queries) UpdateCardActive(ctx context.Context, db DBTX, arg UpdateCardActiveParams) error {
	_, err := db.ExecContext(ctx, updateCardActive, arg.Isactive, arg.Trackedmins, arg.ID)
	return err
}
