// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_skill_progress.sql

package database

import (
	"context"
	"database/sql"
)

const getUserSkillProgress = `-- name: GetUserSkillProgress :one
SELECT id, user_id, skill_id, total_minutes_tracked, last_updated FROM UserSkillProgress WHERE user_id = ? AND skill_id = ? LIMIT 1
`

type GetUserSkillProgressParams struct {
	UserID  int64 `json:"user_id"`
	SkillID int64 `json:"skill_id"`
}

func (q *Queries) GetUserSkillProgress(ctx context.Context, db DBTX, arg GetUserSkillProgressParams) (UserSkillProgress, error) {
	row := db.QueryRowContext(ctx, getUserSkillProgress, arg.UserID, arg.SkillID)
	var i UserSkillProgress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SkillID,
		&i.TotalMinutesTracked,
		&i.LastUpdated,
	)
	return i, err
}

const upsertUserSkillProgress = `-- name: UpsertUserSkillProgress :one
INSERT INTO UserSkillProgress (user_id, skill_id, total_minutes_tracked)
VALUES (?, ?, ?)
ON CONFLICT(user_id, skill_id) DO UPDATE SET
    total_minutes_tracked = total_minutes_tracked + EXCLUDED.total_minutes_tracked,
    last_updated = CURRENT_TIMESTAMP
RETURNING id, user_id, skill_id, total_minutes_tracked, last_updated
`

type UpsertUserSkillProgressParams struct {
	UserID              int64         `json:"user_id"`
	SkillID             int64         `json:"skill_id"`
	TotalMinutesTracked sql.NullInt64 `json:"total_minutes_tracked"`
}

func (q *Queries) UpsertUserSkillProgress(ctx context.Context, db DBTX, arg UpsertUserSkillProgressParams) (UserSkillProgress, error) {
	row := db.QueryRowContext(ctx, upsertUserSkillProgress, arg.UserID, arg.SkillID, arg.TotalMinutesTracked)
	var i UserSkillProgress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SkillID,
		&i.TotalMinutesTracked,
		&i.LastUpdated,
	)
	return i, err
}
