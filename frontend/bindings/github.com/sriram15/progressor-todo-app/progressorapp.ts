// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

/**
 * ProgressorApp is the main application struct. It holds a pointer to the current session,
 * allowing for dynamic switching between profiles.
 * @module
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as database$0 from "./internal/database/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as profile$0 from "./internal/profile/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as service$0 from "./internal/service/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as application$0 from "../../wailsapp/wails/v3/pkg/application/models.js";

/**
 * CardService delegates
 */
export function AddCard(projectID: number, cardTitle: string, estimatedMins: number): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3455355956, projectID, cardTitle, estimatedMins) as any;
    return $resultPromise;
}

/**
 * ProjectService delegates
 */
export function AddProjectSkill(projectID: number, skillID: number): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3153429948, projectID, skillID) as any;
    return $resultPromise;
}

export function Cleanup(): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(4061711157) as any;
    return $resultPromise;
}

export function CreateProfile(p: profile$0.Profile, tursoToken: string): Promise<profile$0.Profile | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1797555708, p, tursoToken) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType1($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * SkillService delegates
 */
export function CreateSkill(userID: number, name: string, description: string): Promise<database$0.UserSkill | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(196155424, userID, name, description) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType3($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function DeleteCard(projectID: number, id: number): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2754193630, projectID, id) as any;
    return $resultPromise;
}

export function DeleteSkill(id: number): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3385224157, id) as any;
    return $resultPromise;
}

export function GetActiveTimeEntry(projectID: number, id: number): Promise<database$0.TimeEntry | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3738693006, projectID, id) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType5($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function GetAll(projectID: number, status: service$0.CardStatus): Promise<database$0.ListCardsRow[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3521340860, projectID, status) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType7($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * SettingService delegates
 */
export function GetAllSettings(): Promise<service$0.SettingsItem[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2694932065) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType9($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function GetCardById(projectID: number, id: number): Promise<database$0.GetCardRow | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3602594751, projectID, id) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType11($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * ProgressService delegates
 */
export function GetDailyTotalMinutes(): Promise<database$0.GetDailyTotalMinutesRow[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2089497561) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType13($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function GetProfiles(): Promise<profile$0.Profile[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(4063829887) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType14($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function GetProjects(): Promise<database$0.Project[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2475329663) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType16($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function GetSetting(key: string): Promise<string> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2696407139, key) as any;
    return $resultPromise;
}

export function GetSkillByID(id: number): Promise<database$0.UserSkill | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(262499882, id) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType3($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function GetSkillsByUserID(userID: number): Promise<database$0.UserSkill[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1268344976, userID) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType17($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function GetSkillsForProject(projectID: number): Promise<database$0.UserSkill[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3862477523, projectID) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType17($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function GetStats(): Promise<service$0.GetStatsResult> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1389545892) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType18($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function GetTotalExpForUser(userID: number): Promise<number> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2506614996, userID) as any;
    return $resultPromise;
}

export function GetUserSkillProgress(userID: number, skillID: number): Promise<database$0.UserSkillProgress | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(842526644, userID, skillID) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType20($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function IsValidProject(projectID: number): Promise<boolean> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2860595248, projectID) as any;
    return $resultPromise;
}

export function RemoveProjectSkill(projectID: number, skillID: number): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(215411041, projectID, skillID) as any;
    return $resultPromise;
}

export function SetSetting(key: string, value: string): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1518944631, key, value) as any;
    return $resultPromise;
}

/**
 * Shutdown is called when the app is shutting down.
 */
export function Shutdown(): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3819227289) as any;
    return $resultPromise;
}

export function StartCard(projectID: number, id: number): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1345455763, projectID, id) as any;
    return $resultPromise;
}

/**
 * Startup is called when the app starts. This is where we can initialize things.
 */
export function Startup(app: application$0.App | null): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(314692372, app) as any;
    return $resultPromise;
}

export function StopCard(projectID: number, id: number): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1800951901, projectID, id) as any;
    return $resultPromise;
}

export function SwitchProfile(profileID: string): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(433656828, profileID) as any;
    return $resultPromise;
}

export function UpdateCard(projectID: number, id: number, updateCardParam: service$0.UpdateCardParams): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2513677688, projectID, id, updateCardParam) as any;
    return $resultPromise;
}

export function UpdateCardStatus(projectID: number, id: number, status: service$0.CardStatus): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(240855322, projectID, id, status) as any;
    return $resultPromise;
}

export function UpdateSkill(id: number, name: string, description: string): Promise<database$0.UserSkill | null> & { cancel(): void } {
    let $resultPromise = $Call.ByID(833172163, id, name, description) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType3($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

// Private type creation functions
const $$createType0 = profile$0.Profile.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
const $$createType2 = database$0.UserSkill.createFrom;
const $$createType3 = $Create.Nullable($$createType2);
const $$createType4 = database$0.TimeEntry.createFrom;
const $$createType5 = $Create.Nullable($$createType4);
const $$createType6 = database$0.ListCardsRow.createFrom;
const $$createType7 = $Create.Array($$createType6);
const $$createType8 = service$0.SettingsItem.createFrom;
const $$createType9 = $Create.Array($$createType8);
const $$createType10 = database$0.GetCardRow.createFrom;
const $$createType11 = $Create.Nullable($$createType10);
const $$createType12 = database$0.GetDailyTotalMinutesRow.createFrom;
const $$createType13 = $Create.Array($$createType12);
const $$createType14 = $Create.Array($$createType0);
const $$createType15 = database$0.Project.createFrom;
const $$createType16 = $Create.Array($$createType15);
const $$createType17 = $Create.Array($$createType2);
const $$createType18 = service$0.GetStatsResult.createFrom;
const $$createType19 = database$0.UserSkillProgress.createFrom;
const $$createType20 = $Create.Nullable($$createType19);
