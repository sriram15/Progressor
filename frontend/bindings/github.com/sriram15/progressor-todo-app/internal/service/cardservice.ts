// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as database$0 from "../database/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

export function AddCard(projectId: number, cardTitle: string, estimatedMins: number): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2202017952, projectId, cardTitle, estimatedMins) as any;
    return $resultPromise;
}

export function Cleanup(): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3994193721) as any;
    return $resultPromise;
}

export function DeleteCard(projectId: number, id: number): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2788317602, projectId, id) as any;
    return $resultPromise;
}

export function GetActiveTimeEntry(projectId: number, id: number): Promise<database$0.TimeEntry> & { cancel(): void } {
    let $resultPromise = $Call.ByID(4100820458, projectId, id) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function GetAll(projectId: number, status: $models.CardStatus): Promise<database$0.ListCardsRow[]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(696958064, projectId, status) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType2($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function GetCardById(projectId: number, id: number): Promise<database$0.GetCardRow> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1773816267, projectId, id) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType3($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function StartCard(projectId: number, id: number): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3002367199, projectId, id) as any;
    return $resultPromise;
}

export function StopCard(projectId: number, id: number): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2995688273, projectId, id) as any;
    return $resultPromise;
}

export function UpdateCard(projectId: number, id: number, updateCardParam: $models.UpdateCardParams): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3388280236, projectId, id, updateCardParam) as any;
    return $resultPromise;
}

export function UpdateCardStatus(projectId: number, id: number, status: $models.CardStatus): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(4189676758, projectId, id, status) as any;
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = database$0.TimeEntry.createFrom;
const $$createType1 = database$0.ListCardsRow.createFrom;
const $$createType2 = $Create.Array($$createType1);
const $$createType3 = database$0.GetCardRow.createFrom;
