// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

/**
 * DBType defines the type of database connection.
 * Use constants DBTypeSQLite or DBTypeTurso.
 */
export enum DBType {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    DBTypeSQLite = "sqlite",
    DBTypeTurso = "turso",
};

/**
 * Profile defines the configuration for a single user profile.
 * It holds the necessary information to connect to a specific database.
 */
export class Profile {
    /**
     * ID is the unique identifier for the profile (e.g., a UUID).
     */
    "id": string;

    /**
     * Name is the user-friendly name for the profile (e.g., "Work", "Personal").
     */
    "name": string;

    /**
     * DBType specifies the database backend, either "sqlite" or "turso".
     */
    "dbType": DBType;

    /**
     * DBPath is the absolute path to the database file. Used only when DBType is "sqlite".
     */
    "dbPath"?: string;

    /**
     * DBUrl is the remote database URL. Used only when DBType is "turso".
     */
    "dbUrl"?: string;

    /**
     * AuthTokenKey is the key used to look up the Turso auth token in the OS keychain.
     * This is NOT the token itself. Used only when DBType is "turso".
     */
    "authTokenKey"?: string;

    /** Creates a new Profile instance. */
    constructor($$source: Partial<Profile> = {}) {
        if (!("id" in $$source)) {
            this["id"] = "";
        }
        if (!("name" in $$source)) {
            this["name"] = "";
        }
        if (!("dbType" in $$source)) {
            this["dbType"] = ("" as DBType);
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Profile instance from a string or object.
     */
    static createFrom($$source: any = {}): Profile {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Profile($$parsedSource as Partial<Profile>);
    }
}
