// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as time$0 from "../../time/models.js";

/**
 * NullFloat64 represents a float64 that may be null.
 * NullFloat64 implements the [Scanner] interface so
 * it can be used as a scan destination, similar to [NullString].
 */
export class NullFloat64 {
    "Float64": number;

    /**
     * Valid is true if Float64 is not NULL
     */
    "Valid": boolean;

    /** Creates a new NullFloat64 instance. */
    constructor($$source: Partial<NullFloat64> = {}) {
        if (!("Float64" in $$source)) {
            this["Float64"] = 0;
        }
        if (!("Valid" in $$source)) {
            this["Valid"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new NullFloat64 instance from a string or object.
     */
    static createFrom($$source: any = {}): NullFloat64 {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new NullFloat64($$parsedSource as Partial<NullFloat64>);
    }
}

/**
 * NullInt64 represents an int64 that may be null.
 * NullInt64 implements the [Scanner] interface so
 * it can be used as a scan destination, similar to [NullString].
 */
export class NullInt64 {
    "Int64": number;

    /**
     * Valid is true if Int64 is not NULL
     */
    "Valid": boolean;

    /** Creates a new NullInt64 instance. */
    constructor($$source: Partial<NullInt64> = {}) {
        if (!("Int64" in $$source)) {
            this["Int64"] = 0;
        }
        if (!("Valid" in $$source)) {
            this["Valid"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new NullInt64 instance from a string or object.
     */
    static createFrom($$source: any = {}): NullInt64 {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new NullInt64($$parsedSource as Partial<NullInt64>);
    }
}

/**
 * NullString represents a string that may be null.
 * NullString implements the [Scanner] interface so
 * it can be used as a scan destination:
 * 
 * 	var s NullString
 * 	err := db.QueryRow("SELECT name FROM foo WHERE id=?", id).Scan(&s)
 * 	...
 * 	if s.Valid {
 * 	   // use s.String
 * 	} else {
 * 	   // NULL value
 * 	}
 */
export class NullString {
    "String": string;

    /**
     * Valid is true if String is not NULL
     */
    "Valid": boolean;

    /** Creates a new NullString instance. */
    constructor($$source: Partial<NullString> = {}) {
        if (!("String" in $$source)) {
            this["String"] = "";
        }
        if (!("Valid" in $$source)) {
            this["Valid"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new NullString instance from a string or object.
     */
    static createFrom($$source: any = {}): NullString {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new NullString($$parsedSource as Partial<NullString>);
    }
}

/**
 * NullTime represents a [time.Time] that may be null.
 * NullTime implements the [Scanner] interface so
 * it can be used as a scan destination, similar to [NullString].
 */
export class NullTime {
    "Time": time$0.Time;

    /**
     * Valid is true if Time is not NULL
     */
    "Valid": boolean;

    /** Creates a new NullTime instance. */
    constructor($$source: Partial<NullTime> = {}) {
        if (!("Time" in $$source)) {
            this["Time"] = null;
        }
        if (!("Valid" in $$source)) {
            this["Valid"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new NullTime instance from a string or object.
     */
    static createFrom($$source: any = {}): NullTime {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new NullTime($$parsedSource as Partial<NullTime>);
    }
}
